{"version":3,"file":"line.component.js","sourceRoot":"","sources":["../../../components/charts/line/line.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, EventEmitter, Input, NgZone, OnChanges, OnInit, Output, SimpleChanges, AfterViewChecked} from '@angular/core';\r\nimport {Chart} from 'angular-highcharts';\r\nimport {ChartUtils} from '../../utils/chart.utils';\r\n\r\n@Component({\r\n    selector: 'dash-line',\r\n    styles: [\r\n        '.lineHolder {height: 100%}'\r\n    ],\r\n    template: `<div [chart]=\"lineChart\" class=\"lineHolder\"  id=\"{{lineId}}\"></div>`\r\n})\r\nexport class LineComponent implements OnChanges, OnInit, AfterViewChecked {\r\n\r\n\r\n    /*\r\n    *   To assure good height adjustation, please give the parent containers a 'height: 100%'\r\n    */\r\n    // lineId = Math.random().toString(36).substring(2, 15);\r\n    @Input() lineId: string = '';\r\n\r\n    // Titles\r\n    @Input() chartTitle = '';\r\n    @Input() chartSubTitle = '';\r\n    @Input() chartTitleAlign = 'center';\r\n\r\n    // Column or line as type\r\n    @Input() chartType = 'line';\r\n    @Input() yTitle = '';\r\n    @Input() xTitle = '';\r\n    @Input() isShowYAxis = true;\r\n\r\n    @Input() pointStart = null;\r\n\r\n    @Input() legendEnabled = true;\r\n    @Input() isColorByPoint = false;\r\n    @Input() isExport = true;\r\n\r\n    @Input() plotLineValue;\r\n    @Input() isNoGridLines = false;\r\n\r\n    // E.G.: xCategories ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n    @Input() xCategories = [];\r\n\r\n    // E.G. Series:\r\n    // [{name: 'Series1', data:[29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4]},\r\n    // {name: 'Series2', data:[216.4, 194.1, 95.6, 54.4, 29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5]}]\r\n    @Input() series;\r\n\r\n    @Output() clickOutput = new EventEmitter<string []>();\r\n\r\n    public lineChart;\r\n\r\n    constructor(private zone: NgZone,\r\n                private chartUtils: ChartUtils) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.lineChart = this.getLineChart(this.series, this.xCategories);\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n    }\r\n\r\n    private getLineChart(series, categories) {\r\n        series['colorByPoint'] = this.isColorByPoint;\r\n        let data = (series instanceof Array ? series : [series]);\r\n        let renderTo: any = document.getElementById(this.lineId);\r\n\r\n        return new Chart({\r\n            chart: {\r\n                plotBackgroundColor: undefined,\r\n                plotBorderWidth: undefined,\r\n                plotShadow: false,\r\n                type: this.chartType,\r\n                renderTo: renderTo\r\n            },\r\n            exporting: {\r\n                enabled: this.isExport,\r\n                buttons: {\r\n                    contextButton: {\r\n                        enabled: true\r\n                    },\r\n                },\r\n            },\r\n            title: {\r\n                text: this.chartTitle,\r\n                align: this.chartTitleAlign\r\n            },\r\n            subtitle: {\r\n                text: this.chartSubTitle\r\n            },\r\n            tooltip: {\r\n                pointFormat: this.chartUtils.capitalize(series) + ': <b>{point.y}</b>'\r\n            },\r\n            yAxis: {\r\n                visible: this.isShowYAxis,\r\n                title: {\r\n                    text: this.yTitle\r\n                },\r\n                gridLineWidth: this.isNoGridLines ? 0 : 1,\r\n                lineWidth: this.isNoGridLines ? 0 : 1,\r\n                plotLines: [{\r\n                    color: '#FF0000',\r\n                    width: this.plotLineValue ? 2 : 0,\r\n                    value: this.plotLineValue ? this.plotLineValue : null\r\n                }]\r\n            },\r\n            xAxis: {\r\n                categories: categories,\r\n                title: {\r\n                    text: this.yTitle\r\n                },\r\n                labels: {\r\n                    autoRotationLimit: 0\r\n                },\r\n                tickWidth: this.isNoGridLines ? 0 : 1,\r\n                lineWidth: this.isNoGridLines ? 0 : 1\r\n            },\r\n            legend: {\r\n                enabled: this.legendEnabled,\r\n                layout: 'vertical',\r\n                align: 'right',\r\n                verticalAlign: 'middle'\r\n            },\r\n            credits: {\r\n                enabled: false\r\n            },\r\n            plotOptions: {\r\n                series: {\r\n                    cursor: 'pointer',\r\n                    events: {\r\n                        click: this.chartClick,\r\n                    },\r\n                },\r\n            },\r\n            series: data\r\n        });\r\n    }\r\n\r\n    public redrawChart(isReflow) {\r\n        if (isReflow) {\r\n            this.lineChart.ref.reflow();\r\n        } else {\r\n            this.lineChart = this.getLineChart(this.series, this.xCategories);\r\n        }\r\n    }\r\n\r\n    /*\r\n    *   Selecting elements on charts or from the outside, will also alter the selected filter elements\r\n    */\r\n\r\n    chartClick = (event) => {\r\n        this.clickOutput.emit(event);\r\n    };\r\n\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['series'] && !changes['series'].firstChange) {\r\n            this.zone.run(() => {\r\n                this.lineChart = this.getLineChart(changes['series'].currentValue, this.xCategories);\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n"]}