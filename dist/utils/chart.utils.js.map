{"version":3,"file":"chart.utils.js","sourceRoot":"","sources":["../../components/utils/chart.utils.ts"],"names":[],"mappings":"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","sourcesContent":["import {DataFunctionEnum} from \"../enum/data-function.enum\";\r\n\r\nexport class ChartUtils {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    /*\r\n    *   We feed these methods JSON data and it generates the chart-series\r\n    */\r\n\r\n    getCountData(data: Object[], seriesIdent: string[]) {\r\n        return this.getDataByFunction(data, seriesIdent, DataFunctionEnum.COUNT);\r\n    }\r\n\r\n    getSumData(data: Object[], seriesIdent: string[], dataIdent) {\r\n        return this.getDataByFunction(data, seriesIdent, DataFunctionEnum.SUM, dataIdent);\r\n    }\r\n\r\n    getMinData(data: Object[], seriesIdent: string[], dataIdent) {\r\n        return this.getDataByFunction(data, seriesIdent, DataFunctionEnum.MINIMUM, dataIdent);\r\n    }\r\n\r\n    getMaxData(data: Object[], seriesIdent: string[], dataIdent) {\r\n        return this.getDataByFunction(data, seriesIdent, DataFunctionEnum.MAXIMUM, dataIdent);\r\n    }\r\n\r\n\r\n    /*\r\n    *   @seriesIdent is the name of the series (e.g. 'bezirke') - could be passed as an array, but does it make sense?\r\n    *   @dataElements contain the element values of the series (e.g. [2011, 2012, ...]) to also insert NULL values for blanks\r\n    *   @seriesPointIdent is the corresponding series identification (e.g. 'years')\r\n    *   @highlight name of the series to highlight in the chart\r\n    */\r\n\r\n    getSeriesData(data: Object[], seriesIdent: string, dataIdent, seriesPointIdent, seriesPointElements: string[], highlight?: string) {\r\n        let dataArray: any[] = [];\r\n        let seriesNames = this.getUniqueSeriesNames(data, [seriesIdent]);\r\n\r\n        for (let uniqueName of seriesNames) {\r\n            let series = {name: uniqueName};\r\n            let seriesData: any[] = [];\r\n\r\n            for (let seriesPoint of seriesPointElements) {\r\n                let found = true;\r\n\r\n                for (let obj of data) {\r\n                    if (obj[seriesPointIdent] === seriesPoint &&\r\n                        this.getElementNameAtLevel([seriesIdent], obj) === uniqueName) {\r\n\r\n                        seriesData.push(Number(obj[dataIdent]));\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!found) {\r\n                    seriesData.push(null);\r\n                }\r\n            }\r\n\r\n            if (series.name == highlight) {\r\n                series[\"color\"] = '#434348';\r\n            }\r\n\r\n            // In this case we only have one Series (in this case the )\r\n            if (seriesPointElements.length == 1) {\r\n                series[\"y\"] = seriesData[0];\r\n            } else {\r\n                series[\"data\"] = seriesData;\r\n            }\r\n            dataArray.push(series);\r\n        }\r\n\r\n        if (seriesPointElements.length == 1) {\r\n            let newDataArray = {};\r\n            newDataArray[\"data\"] = dataArray;\r\n            newDataArray[\"name\"] = [seriesIdent];\r\n            return newDataArray\r\n        } else {\r\n            return dataArray;\r\n        }\r\n    }\r\n\r\n    private getDataByFunction(data: Object[], seriesIdent: string[], calcFunction: DataFunctionEnum, dataIdentity?: string) {\r\n        let dataArray = {};\r\n        dataArray['name'] = seriesIdent;\r\n\r\n        let seriesCollection: any[] = [];\r\n        let seriesNames = this.getUniqueSeriesNames(data, seriesIdent);\r\n        const ident: string = dataIdentity ? dataIdentity : '';\r\n\r\n        for (let uniqueName of seriesNames) {\r\n            let series = {name: uniqueName};\r\n            let dataFunction = 0;\r\n            for (let obj of data) {\r\n                if (this.getElementNameAtLevel(seriesIdent, obj) === uniqueName) {\r\n                    let dataElement = Number(obj[ident]);\r\n\r\n                    if (calcFunction === DataFunctionEnum.COUNT ||\r\n                        calcFunction === DataFunctionEnum.SUM) {\r\n                        if (!dataFunction) {\r\n                            dataFunction = 0;\r\n                        }\r\n                    }\r\n                    if (calcFunction === DataFunctionEnum.COUNT) {\r\n                        dataFunction++;\r\n                    } else if (calcFunction === DataFunctionEnum.SUM) {\r\n                        dataFunction = dataFunction + dataElement;\r\n                    } else if (calcFunction === DataFunctionEnum.MAXIMUM) {\r\n                        if (!dataFunction) {\r\n                            dataFunction = dataElement;\r\n                        } else {\r\n                            dataFunction = dataElement > dataFunction ? dataElement : dataFunction;\r\n                        }\r\n                    } else if (calcFunction === DataFunctionEnum.MINIMUM) {\r\n                        if (!dataFunction) {\r\n                            dataFunction = dataElement;\r\n                        } else {\r\n                            dataFunction = dataElement < dataFunction ? dataElement : dataFunction;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            series['y'] = dataFunction;\r\n            seriesCollection.push(series);\r\n        }\r\n\r\n        dataArray['data'] = seriesCollection;\r\n        return dataArray;\r\n    }\r\n\r\n\r\n    /*\r\n    *   Helper methods\r\n    */\r\n\r\n    public getUniqueSeriesNames(data: Object[], seriesIdent: string[]) {\r\n        let seriesNames: any[] = [];\r\n        for (let obj of data) {\r\n            let currentSeriesName = this.getElementNameAtLevel(seriesIdent, obj);\r\n            if (seriesNames.indexOf(currentSeriesName) === -1) {\r\n                // It does not exist yet\r\n                seriesNames.push(currentSeriesName);\r\n            }\r\n        }\r\n        return seriesNames;\r\n    }\r\n\r\n    private getElementNameAtLevel(seriesIdent: string[], obj) {\r\n        let latestElement;\r\n        for (let sIdent of seriesIdent) {\r\n            latestElement = latestElement ? latestElement : obj;\r\n            if (latestElement[sIdent] instanceof Array) {\r\n                latestElement = latestElement[sIdent][0];\r\n            } else {\r\n                latestElement = latestElement[sIdent];\r\n            }\r\n        }\r\n\r\n        let currentSeriesName = latestElement;\r\n        return currentSeriesName;\r\n    }\r\n\r\n    public concatAllElements(textArr: string[]): string {\r\n        let concatenated = '';\r\n        for (let text of textArr) {\r\n            concatenated = concatenated.concat(' ' + text);\r\n        }\r\n        return concatenated;\r\n    }\r\n\r\n    public capitalize(value: any): string {\r\n        let string = '';\r\n        if (value instanceof Array) {\r\n            string = value[0].name;\r\n        } else if (typeof value === 'object') {\r\n            string = value.name[0];\r\n        } else {\r\n            string = value.name;\r\n        }\r\n\r\n\r\n        return string.charAt(0).toUpperCase() + string.slice(1)\r\n    }\r\n}\r\n"]}